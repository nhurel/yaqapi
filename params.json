{"name":"Yaqapi","tagline":"","body":"# Introduction\r\nYAQ API is Yet Another Query API. It takes the typesafety from torpedo query project and the \r\nfluent syntax from jooq to provide the best Hibernate Query DSL. YAQ API main advantages are :\r\n* Typesafety\r\n* Easy to use API through its DSL\r\n* No class generation needed, no specific annotation nor any other tricky stuff\r\n* Fluent query writing\r\n* **No more StringBuilders** :stuck_out_tongue:\r\n\r\n# Setup\r\nYAQ API is as easy to install as just including a jar in your classpath. \r\n\r\n## Maven support\r\nEven if YAQ API is not yet available on a maven central repository, you can easily reference it in \r\nyour pom.xml with the system scope :\r\n```xml\r\n<dependency>\r\n\t<groupId>me.hurel.hqlbuilder</groupId>\r\n\t<artifactId>yaqapi</artifactId>\r\n\t<version>1.0.0</version>\r\n\t<scope>system</scope>\r\n\t<systemPath>${project.basedir}/src/main/webapp/WEB-INF/lib/yaqapi-1.0.0.jar</systemPath>\r\n</dependency>\r\n```\r\n\r\n#Usage\r\n\r\n##Static import\r\nThe most convenient way to use YAQ API is to make a static import of the Yaqapi class :\r\n```java\r\nimport static me.hurel.hqlbuilder.builder.Yaqapi.*;\r\n```\r\n\r\n##Write your query\r\nThe first thing to do before writing your query is to create a proxy object on the entity class you want to query.\r\nThis is simply done with the *queryOn* static method: \r\n```java\r\nUser user = queryOn(User.class);\r\n```\r\n\r\nThen, simply write your query, starting with the select method and let you drive by the DSL :\r\n```java\r\nQueryBuilder query = select(user).from(user)\r\n\t\t\t\t\t\t.where(user.getAge()).isGreaterThan(18)\r\n\t\t\t\t\t\t.orderBy(user.getLastName());\r\n```\r\n**Tip** : Use `selectFrom(user)` method as a shorthand for `select(user).from(user)`\r\n\r\nFinally, just build you query :\r\n```java\r\nList<User> adults =  (List<User>)query.build(sessionFactory.createSession()).list();\r\n```\r\n\r\nAnd that's it ! \r\n\r\n You can put it all together :\r\n```java\r\nUser user = queryOn(User.class);\r\nList<User> adults = selectFrom(user)\r\n\t\t\t\t\t\t.where(user.getAge()).isGreaterThan(18)\r\n\t\t\t\t\t\t.orderBy(user.getLastName())\r\n\t\t\t\t\t\t.build(sessionFactory.createSession()).list();\r\n```\r\n\r\n\r\n# Features\r\nYAQ API currently supports :\r\n* aliases in select clause\r\n* joins (inner and outer, specifying fetch)\r\n* cross joins\r\n* exists clause\r\n* group by... having clause\r\n* case when... then... else... end syntax\r\n* collections property (see the dollar function)\r\n* count, min, max, sum, avg functions\r\n* YAQ API declares parameters using the JPQL syntax and sets automatically the parameters\r\n\r\n# $ function\r\nThe dollar function is a convenient way to query on properties of a collection property. \r\nSee example below to understand :\r\n```java\r\nUser user = queryOn(User.class);\r\nList<User> parents = select(user).from(user)\r\n\t\t\t\t\t\t\t.innerJoin(user.getChildren())\r\n\t\t\t\t\t\t\t.where($(user.getChildren()).getAge()).isLessThan(10)\r\n\t\t\t\t\t\t\t.build(sessionFactory.createSession()).list();\r\n```\r\n\r\nThe dollar function can be used as many time as needed to access a property\r\n```java\r\nselect(user).from(user)\r\n\t.innerJoin(user.getChildren())\r\n\t.innerJoin($(user.getChildren()).getAdress())\r\n\t.where($($(user.getChildren()).getAdress()).getCity()).isLike(\"F%\")\r\n\t.build(sessionFactory.createSession()).list();\r\n```\r\n\r\n# Tips and advanced usages\r\n## Cross join\r\nTo query on two distinct entities, it is necessary to build two proxies. \r\nSince the `queryOn` function can be called only once, you have to create the second proxy with the `andQueryOn` method.\r\n```java\r\nUser user = queryOn(User.class);\r\nCountry country = andQueryOn(Country.class);\r\nList<User> usersWithACountryName = select(user).from(user).andFrom(country)\r\n\t\t\t\t\t\t\t\t\t.where(user.getLastName()).isEqualTo(country.getName())\r\n\t\t\t\t\t\t\t\t\t.build(sessionFactory.createSession()).list();\r\n```\r\n\r\n## Declare variables\r\nAccessing deep properties can make your query hard to read. With Yaqapi, you can declare a variable for whatever entity.\r\n```java\r\nUser user = queryOn(User.class);\r\nAdress adress = user.getAdress();\r\nCity city = adress.getCity();\r\nList<User> users = selectFrom(user).innerJoinFetch(user.getAdress())\r\n\t\t\t\t\t\t\t\t\t.innerJoinFetch(adress.getCity())\r\n\t\t\t\t\t\t\t\t\t.where(city.getName()).isLike(\"R%\")\r\n\t\t\t\t\t\t\t\t\t.build(sessionFactory.createSession()).list();\r\n```\r\n**Warning** : You can declare variables for entities object. Final properties must be accessed via their getter in the DSL (like `city.getName()` in the previous example)\r\n\r\n\r\n## Use all Hibernate features\r\nYaqapi is **just** a query builder. This means that once you have called the build() method, you get a pure Hibernate Query object.\r\nSo you can call setFirstResult(), setMaxResults(),... functions :\r\n```java\r\nQuery hibernateQuery = select(user.getLastName()).as(\"name\").and(count(\"*\")).as(\"members\")\r\n\t\t\t\t\t\t.from(user)\r\n\t\t\t\t\t\t.groupBy(user.getLastName())\r\n\t\t\t\t\t\t.build(sessionFactory.createSession());\r\nhibernateQuery.setResultTransformer(new AliasToBeanResultTransformer(WhateverClass.class));\r\nreturn hibernateQuery.list();\r\n```\r\n\r\n\r\n#License\r\nYAQ API is distributed under Mozilla Public License v2.0 meaning you can use this library either in open source and proprietary project.\r\n\r\nIf you improve this project by adding functionnality or fixing a bug, you must share all your improvements.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}