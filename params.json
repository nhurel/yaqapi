{"name":"Yaqapi","tagline":"","body":"# Introduction\r\nYAQ API is Yet Another Query API. It takes the typesafety from torpedo query project and the \r\nfluent syntax from jooq to provide the best Hibernate Query DSL. YAQ API main advantages are :\r\n* Easy to use API through its DSL\r\n* No class generation needed, no specific annotation nor any other tricky stuff\r\n* Fluent query writing\r\n* **No more StringBuilders** :stuck_out_tongue:\r\n\r\n# Setup\r\nYAQ API is as easy to install as just including a jar in your classpath. \r\n\r\n## Maven support\r\nEven if YAQ API is not yet available on a maven central repository, you can easily reference it in \r\nyour pom.xml with the system scope :\r\n```xml\r\n<dependency>\r\n\t<groupId>me.hurel.hqlbuilder</groupId>\r\n\t<artifactId>yaqapi</artifactId>\r\n\t<version>1.0.0</version>\r\n\t<scope>system</scope>\r\n\t<systemPath>${project.basedir}/src/main/webapp/WEB-INF/lib/yaqapi-1.0.0.jar</systemPath>\r\n</dependency>\r\n```\r\n\r\n#Usage\r\n\r\n##Static import\r\nThe most convenient way to use YAQ API is to make a static import of the Yaqapi class :\r\n```java\r\nimport static me.hurel.hqlbuilder.builder.Yaqapi.*;\r\n```\r\n\r\n##Write your query\r\nThe first thing to do before writing your query is to create a proxy object on the entity you want to query.\r\nThis is simply done with the *queryOn* static method: \r\n```java\r\nUser user = queryOn(new User());\r\n```\r\n\r\nThen, simply write your query, starting with the select method and let you drive by the DSL :\r\n```java\r\nQueryBuilder query = select(user).from(user).where(user.getAge()).isGreaterThan(18).orderBy(user.getLastName());\r\n```\r\n\r\nFinally, just build you query :\r\n```java\r\nList<User> adults =  (List<User>)query.build(sessionFactory.createSession()).list();\r\n```\r\n\r\nAnd that's it ! \r\n\r\n# Features\r\nYAQ API currently supports :\r\n* joins (inner and outer, specifying fetch)\r\n* cross joins\r\n* exists clause\r\n* group by... having clause\r\n* collections property (see the dollar function)\r\n* count, min, max, sum, avg functions\r\n* YAQ API declares parameters using the JPQL syntax and sets automatically the parameters\r\n\r\n# $ function\r\nThe dollar function is a convenient way to query on properties of a collection property. \r\nSee example below to understand :\r\n```java\r\nUser user = queryOn(new User());\r\nList<User> parents = select(user).from(user).innerJoin(user.getChildren()).where($(user.getChildren()).getAge()).isLessThan(10).build(sessionFactory.createSession()).list();\r\n```\r\n\r\n#License\r\nYAQ API is distributed under Mozilla Public License v2.0 meaning you can use this library either in open source and proprietary project.\r\n\r\nIf you improve this project by adding functionnality or fixing a bug, you must share all your improvements.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}